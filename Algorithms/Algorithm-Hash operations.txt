How to choose m?(the pre-allocated memory size of table)
Idea:
Start from a small number
Then grow/shrink as necessary

If n > m:grow table
m' = m + 1:cost of n inserts --> will results in high complexity for a frequently changing hash table
m' = 2m --> double table

Amortizatin:
--operation takes 'T(n) amortized' 
		if k operation take <= kT(n) time
--think of meaning T(n) on average
		where average over all operations
Deletion:
shrink when m become m/4

Grow table: m -> m'    m the current table size, m' the desired table size
-- make table of size m'
--build new hash f'
--rehash
	for item in T:
		T'.insert(item)
		
		
string matching:
--given two strings s & t,does s occur as a substring of t?
1.Simple algorithm:
	any(s == t[i:i+len(s)])
		for i in range(len(t)-len(s))
		
		
Rolling Hashes
--r.append(c)
	add character to the end of x
--r.skip(c)
	delete first character of x(assume it it constant)

r maintains a string x
--r():hash value of x is h(x)


Karp-Rabin algorithm
	for c in s:rs.append(c)
	for c in t[:len(s)]:
		if rs() == rt():...
		for i in range(len(s),len(t)):
		rt.skip(t[i-len(s)])
		






























