Dynamic Programming:
subproblems + result reuse

Fibonacci Numbers:
	F1 = F2 = 1
	Fn = F(n-1) + F(n-2)
	
Goal:compute the nth Fn

Naive recursive algorithm:
fib(n):
	if n <= 2: f = 1
	else:f = fib(n-1) + fib(n-2)
	return f
	
Memorized DP algorithm:
memo = {}
fib(n):
	if n in memo: return memo[n]
	if n <= 2:f = 1
	else:f = fib(n-1) + fib(n-2)
	memo[n] = f
	return f
	
fib(k) only recurses the first time it's called.
--memorized calls cost o(1)
--unmemorized calls cost O(n)
--nonrecursive work per call O(1)

DP = recursion + memorization + guessing
--memorized (remember) & re-use solutions 
	to subproblems that help solve the problem

Bottom up DP algorithm

fib = {}
for k in range(1,n+1):
	if k <= 2:f = 1
	else:f = fib[k-1] + fib[k-2]
	fib[k] = f
	return fib[n]
	
--exactly same computation
--topological sort of subproblem dependency DAG
--can often save space

Shortest paths:
single source sortest path

s -> (s') -> () -> () -> (v)
Don't know where is the best start point?
Guess-->randomly pick one

s -> () -> () -> (u) -> (v)


Guessing:
	don't know the answer ? guess
	don't try some guesses, try them all take the best one
	
5 easy steps to DP
	1.define subproblems
	2.guess(part of solution)
	3.relate subproblem solution
	4.recurse & memorize 
		or build DP table bottom-up
	5.solve original problem
	
Text justification
	split text into good lines
	(avoid big blanks)
	text = list of words
	badness(i,j)--> how bad it is use words[i:j] as line
				=(page width - total width)^3
				=inifinity if don't fit
		

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	

	

	