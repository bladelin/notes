Heap and Heap Sort

Priority Queue
Implements a set of elements where each of element associated with a key

Methods in Queue.

Insert(S,x)	Insert element x into set S
max(S)	return element of S with the largest key
extract_max(S)	return and remove the largest key in set S
increase_key(S,x,k) Increase the value of x's key to a new value k


Heap
An array visualized as a nealy complete binary tree

[16 14 10 8 7 9 3 2 4 1]
16 is the root of this tree.
The heap structure:
						16
			14						10
		8			7		9	  			3
	2		4	1
	
Heap as a tree:
Root of tree : first element i = 1
parent of i = i/2
left child of i = 2i 	right child of i = 2i +	1

Max Heap Property
The key(value) of a node is >= that of its children

[2 4 1]
		2
	4		1
How to turn a unordered heap into a max heap?

Heap Operations:

build_max_heap:	produce a maxheap from a unordered array
max_heapify: Correct a single violation of the heap property in a subtree's root

Assume that the trees rooted at left(i) and right(i) are max heaps
Heap A
						16(1)		
				4(2)				10(3)
		14(4)			7(5)	9(6)	3(7)	
	2(8)	8(9)	1(10)
	
4, whose index is 2,is the only violation here
subtrees of node 2 are all max heaps

max_heapify() process
1.check if the father node satisfy the max heap property,if not compare and swap values of the 
father node and its children.
2.the first step may cause the children node do not satisfy max heap property,then we need to 
perform max_heapify onto the children node.
3.recursively perform step 1. & 2. until the heap become max heap.

max_heapify(A,2)		heap-size(A) = 10
1.Exchange A[2] with A[4]
2.Call max_heapify(A,4)
3.Exchange A[4] with A[8]
4.Finished.

max_heapify() complexity O(lgn)

Heap Sort:

1.Convert A[1...n] into a max heap

	Build max heap(A):
		for i = i/2 down to 1
			do max_heapify(A,i)		//A[n/2+1...n] are leaves of heap
									//This will also satisfy the max heap property
Complexity of build a max heap O(n)
			
2.Extract max value in the converted max heap

	1.Find the max element A[1]
	2.Swap elements A[n] with A[1],now max element is at the end of the array
	3.Discard node n from heap,decrementing heap size
	4.New root may violate max heap property, but children are max heaps,so we can run max heapify at A[1]
	
Repeatly call extract_max() will return us the sorted array.
Complexity O(nlgn)

So the overall heap sort complexity is O(nlgn)































	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	